package ${package.Controller};


    #if(${restControllerStyle})
    import org.springframework.web.bind.annotation.RequestMethod;
    import org.springframework.web.bind.annotation.RestController;
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end

        import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;


import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.hb.entity.R;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
public ${table.serviceName} ${table.entityPath}Service;



/**
 * 新增
 */
@ResponseBody
@RequestMapping(method = RequestMethod.POST, value = "/add")
public R add(@RequestBody ${entity} ${table.entityPath}){
        try{
        boolean result =${table.entityPath}Service.save(${table.entityPath});
        if(!result){
        return new R(true, "新增失败", "");
        }
        }catch(Exception e){
        logger.error("${table.entityPath}Save -=- {}" ,e.toString());
        return new R(true, "新增失败", "");
        }
        return new R(true, "新增成功", ${table.entityPath});
}




	/**
	 * 修改
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.POST, value = "/update")
	public R update(@RequestBody ${entity} ${table.entityPath}) {
		try {
			${entity} tmp = ${table.entityPath}Service.getById(${table.entityPath}.getId());
			if(tmp==null){
				return new R(true, "根据ID查找数据并不存在", "");
			}
			
			Boolean result = ${table.entityPath}Service.updateById(${table.entityPath});
			if (!result) {
				return new R(true, "修改失败", "");
			}
			return new R(true, "修改成功", ${table.entityPath});
		} catch (Exception e) {
			logger.error("${entity}Update -=- {}", e.toString());
			return new R(true, "修改失败", "");
		}
		
	}

	/**
		 * 删除
		 */
		@ResponseBody
		@RequestMapping(method = RequestMethod.POST, value = "/delete")
		public R delete(@RequestBody ${entity} ${table.entityPath}) {
			try {
				${entity} tmp = ${table.entityPath}Service.getById(${table.entityPath}.getId());
				if (tmp == null) {
					return new R(true, "根据ID查找数据并不存在", "");
				}

				Boolean result = ${table.entityPath}Service.removeById(${table.entityPath}.getId());
				if (!result) {
					return new R(true, "删除失败", "");
				}
				return new R(true, "删除成功", ${table.entityPath});
			} catch (Exception e) {
				logger.error("${table.entityPath}Delete -=- {}", e.toString());
				return new R(true, "删除失败", "");
			}
	}

		/**
		 *  查询
		 */
		@ResponseBody
		@RequestMapping(method = RequestMethod.POST, value = "/query")
		public R query(@RequestBody ${entity} ${table.entityPath}) {
			try {
				QueryWrapper<${entity}> queryWrapper =  new QueryWrapper<>();
				

        //条件拼接
#foreach($field in ${table.fields})
    #if(!${field.keyFlag})
        if (!StringUtils.isEmpty(${table.entityPath}.${getprefix}${field.capitalName}())){
            queryWrapper.eq("${field.propertyName}", ${table.entityPath}.${getprefix}${field.capitalName}());
        }
    #end
#end


				
				List<${entity}> resultList = ${table.entityPath}Service.list(queryWrapper);
				return new R(true, "查询成功", resultList);
			} catch (Exception e) {
				logger.error("sysAreaDelete -=- {}", e.toString());
				return new R(true, "查询失败", "");
			}
	}


        }